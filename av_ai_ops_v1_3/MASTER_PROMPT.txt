You are GPT-5 Thinking. Produce a **complete, production-grade, repo-ready application** for the **AV AI OPS** pilot as a **static HTML/JavaScript (ES modules) application** that can be opened directly in a Windows browser (double-click `apps/av-wizard/index.html` via `file://`). Supply **optional local MCP tool servers** (Node/Express) for secure development with **Zoom, Slack, GitHub, Google Drive, ServiceNow**, and a **Search MCP** (Chrome compatible, with a mock fallback). 

In addition to printing the **entire repository** as code blocks (no omissions), you MUST also **produce a production-ready ZIP artifact** inside the chat:
- Emit a **Base64-encoded ZIP** of the full repo split into 5–20 MB chunks (label each chunk in order).
- Provide the **ZIP filename** (e.g., `av-ai-ops_base.zip`), its **total size**, and **SHA-256 checksum**.
- Provide a Windows **PowerShell script** (`scripts/win/restore_zip.ps1`) that reassembles chunks, validates SHA-256, and writes the ZIP to disk.
- Provide a **.bat helper** (`scripts/win/restore_zip.bat`) that calls the PowerShell script.
- Include complete instructions in `docs/GET_ZIP.md` for restoring the ZIP from chunks.

----------------------------------------------------------------
## Scope & Objectives

### Primary outcome
Deliver a **self-contained, file://-safe** HTML app that guides a user through **AV AI OPS** setup, runs **agents** in the browser (Web Workers), coordinates with **local MCP tool servers** to access real systems, and implements a rigorous **Optimization Framework** for **AV enabled spaces**.  Include a **KB MCP Agent** that builds KB articles, provides How-to, triage, support for AV support requests, incidents, workflows, projects and creates optimization recipes, saving them as HTML documents. 

### High-level requirements
- **Zero install for the app**: Users must be able to double-click `index.html` and run entirely offline in **Mock Mode**. 
- **Real Mode**: Optional local MCP servers proxy secrets and OAuth; browser never holds secrets.
- **Windows-first developer experience**: `.bat` and PowerShell scripts; no admin rights needed; Node 20+ only for MCP servers.
- **All code printed inline** as fenced blocks with full contents; **no ellipses, no placeholders, no minimal code** make robust.
- **A Base64 ZIP** of the repository with integrity tooling.
- ** Production-ready repository** writen to disk in output.
----------------------------------------------------------------
## Deliverables (FULL & MANDATORY)

1) **Static Web App** in `apps/av-wizard/` (no bundler required):
   - `index.html` (hash-router + layout + offline notice)
   - `styles/` with **tailwind-lite.css** (local utilities; no CDN)
   - `lib/` (IndexedDB helper, JSON schema validator, YAML parser, canvas chart helper, task bus, utilities)
   - `components/` (wizard steps, toasts, health cards, charts, editors)
   - `pages/` (Welcome, Integrations, Agents, Optimization, Recipes, Review, Launch, Dashboard, Improve, Settings)
   - `workers/` (Web Workers for each agent)
   - `db/` (schema migrations for IndexedDB; seed/demo data)
   - `mcp/clients/` (HTTP clients for MCP tool servers with CORS and retry/backoff)
   - `assets/` (SVG icons, inline fonts if needed, generated swimlane SVG/PNG)
   - **No external CDNs**; include small third-party libs as local files.
   - **

2) **Browser-based Agents** (Web Workers) in `apps/av-wizard/workers/`:
   - `agent-conductor` — dispatches tasks, enforces approvals, SLAs, MCPS checks.
   - `agent-support-requests` — `/avhelp` intake to ServiceNow MCP; triage flow.
   - `agent-incidents` — classification & self-heal with Zoom Room/Q-SYS (mock) playbooks.
   - `agent-projects` — Build/Change/Story scaffolding in ServiceNow.
   - `agent-events` — HTML av event support request form intake - ServiceNow templates - Stories/Tasks for each event  + REMI hooks, Zoom webinars/meetings, Slack confirmations.
   - `agent-recipe-library` — YAML CRUD + schema validation/guardrails; versioning.
   - `agent-baseline-dashboards` — telemetry snapshots → dashboard cards (Canvas).
   - `agent-incident-outcome-mapper` — links incidents↔outcomes; correlation views.
   - **NEW `agent-kb-recipe-scout`** — **search → crawl → synthesize KB → create ServiceNow KB → save recipe → Slack notify** with domain allow-list & dry-run preview.

3) **MCP Tool Servers** in `mcp-tools/` (Node 20 + Express; secure by design; CORS allowed for `file://` and `http://localhost`):
   - `mcp-slack/` — post message, reply in thread, DM, list channels; mock when no credentials.
   - `mcp-zoom/` — create webinar/meeting, list users/licenses; mock fallback.
   - `mcp-github/` — create issue, create gist, read repo files; mock fallback.
   - `mcp-gdrive/` — create folder/file, upload, list; mock fallback.
   - `mcp-servicenow/` — KB/Incident/Story/Change + CMDB; mock fallback.
   - `mcp-search/` — Chrome proxy; mock results when no key.
   - Each server must include:
     - `server.js`, `package.json`, `package-lock.json`, `Dockerfile`, `.env.example`, `README.md`
     - `auth/` helpers (OAuth/token where applicable)
     - `lib/clients/` safe wrappers for vendor APIs
     - `openapi.json`
     - endpoints: `/api/test`, tool operations, `/healthz`, `/readyz`, `/version`
     - rate limiting, structured logs, input validation, error normalization

4) **Shared Packages** in `packages/`:
   - `schemas/` JSON Schemas:
     - `room_twin.schema.json`, `outcome_event.schema.json`, `experiment_event.schema.json`, `recipe.schema.json`, `event.remi.intake.schema.json`, `mcp.manifest.schema.json`
   - `recipes/`:
     - `starter_recipes.yaml`, `showcase_recipes.yaml` (lighting/audio/layout; guardrails + metrics)
   - `recipe-engine/`:
     - YAML→runtime compile, schema validation (AJV), guardrail checks, effect sizes (Cohen’s d / % lift), promotion/rollback logic
   - `value-reporting/`:
     - Value Realized calculator, HTML report generator (printable)
   - `ui/`:
     - `tailwind-lite.css` and local SVG icons

5) **Docs & Runbooks** in `docs/`:
   - `README.md` (quickstart, repo tree, full descriptions of each page, offline Mock Mode)
   - `SETUP_WINDOWS.md` (double-click app, start MCP servers, no admin rights)
   - `INTEGRATIONS.md` (Slack/Zoom/GitHub/Drive/SNOW Real Mode setup + OAuth/token configs)
   - `AGENTS.md` (agent intents, MCPS, approvals)
   - `MCP_TOOLS.md` (API contracts, OpenAPI usage)
   - `MCPS.md` (full standards & health model)
   - `RUNBOOKS/` (user manual, step by step, on-call, change management, REMI rehearsal/live checklist)
   - `GET_ZIP.md` (how to reassemble Base64 ZIP chunks and verify SHA-256)
   - `LIMITATIONS.md`, `SECURITY.md`

6) **Infra & Scripts**:
   - `infra/docker-compose.yml` — optional: bring up MCP servers + simple static web server
   - **Windows scripts**:
     - `scripts/win/start_all_mcp.bat` (spawns each MCP server)
     - `scripts/win/start_<tool>.bat` (per tool)
     - `scripts/win/restore_zip.ps1` and `scripts/win/restore_zip.bat` (ZIP restoration)
   - `.env.example` at repo root and per MCP tool

7) **Repository artifact**:
   - **All files printed inline** with their full content (no omissions).
   - **Base64-encoded ZIP** chunks + restore tooling + SHA-256 checksum.

----------------------------------------------------------------
## Optimization Framework (Concrete Focus)

**Executive Briefing Rooms — Lighting & Audio Scene Optimization for Decision Lift**

- **KPIs**: 
  - `decision_reached` (0/1), `followup_booked` (0/1), `csat` (0–10), 
  - `engagement_proxy` (count/time), `issue_rate_per_100`, `join_latency_s`
- **Experiment designs**:
  - A/B or ε-greedy bandit; guardrails + rollback
  - Assignment logging in IndexedDB; stats module produces effect sizes and confidence
- **Recipes** (YAML) examples:
  - Cool 5000K vs neutral 4000K at analytic phases
  - Warm 3200K at close/outro
  - Mic gate/beamforming for fatigue reduction
- **Promotion**:
  - Requires statistically *or* operationally significant lift and no guardrail breach
- **Value Realized**:
  - Lift × event volume × business mapping; downloadable HTML/PDF report

----------------------------------------------------------------
## MCP Agent — KB & Recipe Builder (Search-Driven)

**`agent-kb-recipe-scout` (Web Worker)**:
1. Accepts seed query and **domain allow-list**.
2. Calls `mcp-search` (Chrome proxy; mock fallback).
3. Fetches and sanitizes top N pages (strip nav/ads; extract actionable steps).
4. Synthesizes **ServiceNow KB HTML** (title, context, pre-reqs, step list, validations, references).
5. Derives **Recipe YAML** with `hypothesis`, `knobs`, `metrics`, `guardrails`, `risk`.
6. Saves KB via `mcp-servicenow` (returns `sys_id`), stores recipe to local Recipe Library.
7. Posts Slack notification with KB link and recipe summary via `mcp-slack`.
8. Persists artifacts to IndexedDB; provides review UI and retry/backoff.

**Safety & Compliance**:
- Respect robots.txt (document in `MCP_TOOLS.md`)
- Domain allow-list enforced; max request rate; content attribution included in KB reference section
- Sanitization of HTML before KB create

----------------------------------------------------------------
## MCPS — Minimum Capabilities & Performance Standards

**MCP Tools**
- Slack: deliver message/thread within **2s p95**; error < **1%**; channel listing works
- Zoom: create webinar/meeting (or mock) within **4s p95**
- GitHub: create gist/issue within **3s p95**; return URL
- Google Drive: create folder/file within **4s p95**; return fileId
- ServiceNow: create KB/story within **5s p95**; return `sys_id`; CMDB query
- Search: ≥ **10** results (or mock) within **4s p95**; domain filters honored

**Agents**
- Conductor: dispatch p95 ≤ **500 ms**; 99% routing accuracy
- Events: rehearsal/live artifacts complete; Slack confirmations posted
- Incidents: first action ≤ **60s**; auto-resolve ≥ **40%** of known issues
- Recipe Library: 100% schema-valid recipes; guardrails enforced; versioned copies
- KB-Recipe Scout: allow-list enforced; successful KB+Recipe publish and Slack notify
- Baseline Dashboards: refresh ≤ **10s** for demo dataset
- Incident→Outcome Mapper: produces link IDs; ≥ 3 correlation views

**Health/Enforcement**
- Each agent/tool exposes health to UI (latency p95, error rate, heartbeat)
- Red/Amber/Green status and remediation hints
- Failing MCPS triggers toast + runbook link

----------------------------------------------------------------
## Architecture & Security Constraints

- The **browser app NEVER holds secrets**. All secrets stay in `.env` files used by MCP servers.
- CORS: allow `file://` and `http://localhost` origins; deny all others by default.
- OAuth flows only in MCP servers (`http://localhost:<port>/callback`).
- Mock Mode: identical response shapes; switchable from the wizard.
- Privacy: no analytics/trackers; no network calls in mock mode except to local MCP mocks (optional).
- Accessibility: Wizard and Dashboard target **WCAG 2.1 AA** basics (labels, focus order, contrast).

----------------------------------------------------------------
## Windows Developer Experience

- **Offline**: Double-click `apps/av-wizard/index.html` to run in Mock Mode.
- **Real Mode**: Run `scripts/win/start_all_mcp.bat` to start MCP servers with `.env` secrets.
- **No admin rights**: Local Node in repo, pinned via `package-lock.json`; scripts reference local binaries.
- **Troubleshooting**: `docs/SETUP_WINDOWS.md` includes common port conflicts and PowerShell policy notes.

----------------------------------------------------------------
## Repository Output Format (STRICT & COMPLETE)

1) Print a concise **file tree** of the entire repo.
2) For **every file**, print a fenced code block labeled with the **exact path** and containing the **full content** (no placeholders/omissions).
3) Include small third-party libs as local files (e.g., AJV build, YAML parser).
4) Provide `LICENSE` (MIT or Apache-2.0), `SECURITY.md`, `CONTRIBUTING.md`.

**Example labeling style**:
repo/
apps/av-wizard/index.html
apps/av-wizard/styles/tailwind-lite.css
apps/av-wizard/lib/idb.js
apps/av-wizard/lib/validator.js
apps/av-wizard/lib/yaml.min.js
apps/av-wizard/pages/...
apps/av-wizard/components/...
apps/av-wizard/workers/agent-conductor.js
apps/av-wizard/workers/agent-kb-recipe-scout.js
packages/schemas/recipe.schema.json
packages/recipes/starter_recipes.yaml
mcp-tools/mcp-slack/server.js
mcp-tools/mcp-slack/.env.example
scripts/win/start_all_mcp.bat
scripts/win/restore_zip.ps1
docs/README.md
docs/GET_ZIP.md
infra/docker-compose.yml
.github/workflows/ci.yml

For each entry, include:
--- path/to/file.ext
<full file contents here, no omissions>

----------------------------------------------------------------
## Implementation Details

### Frontend (Static HTML/JS)
- **index.html**: hash-based router, global layout, status bar, offline banner
- **Wizard flow**: Welcome → Integrations → Agents → Optimization → Recipes → Review → Launch → Dashboard→ Improve
- **Dashboard**: agent toggles/health, baseline charts (Canvas 2D), experiments runner, Value Realized report (print)
- **Storage**: IndexedDB via `lib/idb.js` with schema migrations and export/import buttons
- **Validation**: local `validator.js` (AJV-compatible subset) for JSON Schemas
- **Recipes**: YAML editor with embedded `yaml.min.js`; schema validation; diff view and versioning
- **Workers**: message bus with `request/ack/status`, retries/backoff; structured logs printable in UI
- **Diagrams**: swimlane + REMI overlay generated as inline SVG and saved to `docs/diagrams/`

### MCP Tool Servers (Node/Express)
- Routes: `/api/test`, tool operations, `/healthz`, `/readyz`, `/openapi.json`
- **Security**: secrets only in `.env`; input validation; rate limiting; CORS locked to file/localhost
- **Auth**: OAuth or tokens (documented per tool)
- **Mocks**: enable with env flag; consistent shape with real endpoints
- **OpenAPI**: provide JSON for each server; include a small HTML test page

### Search → KB → Recipe Flow
- Query + allow-list → search results → fetch pages → sanitize/extract steps
- Generate ServiceNow KB HTML (title, pre-reqs, steps, validation, references)
- Create Recipe YAML (hypothesis, knobs, metrics, guardrails, risk)
- Save KB via ServiceNow MCP; store `sys_id`
- Save recipe to Recipe Library (IndexedDB)
- Notify Slack with KB/recipe links
- Persist artifacts; expose “approve/publish” with dry-run preview

### Recipe Engine
- Validate YAML vs `recipe.schema.json`
- Guardrail checks (rollback on thresholds)
- Effect size and promotion criteria
- Rollback plan generation

### Value Reporting
- Merge experiments + outcomes; compute lift & $ mapping
- Render HTML report with print CSS; export to PDF via browser print

### Tests
- Browser test page for core libs (validator, recipes, value reporting)
- `.http` examples against MCP servers (for VSCode REST client/Postman)
- Mock harness to replay flows

### Security & Privacy
- Never embed secrets in browser
- CORS: `file://`, `http://localhost` only
- Redaction of PII in logs; short retention docs

----------------------------------------------------------------
## Acceptance Criteria (verifiable)

1) **Open `apps/av-wizard/index.html`**:
   - Wizard loads offline; Mock Mode toggle visible
   - Create a “Pilot Project”, seed recipes, run demo experiment
   - Dashboard shows green health (mocks)

2) **Run `scripts/win/start_all_mcp.bat`**:
   - MCP servers start using `.env`; `/healthz` green
   - Real Mode toggled in Wizard can:
     - Post Slack message
     - Create ServiceNow KB (or mock `sys_id`)
     - Create Zoom webinar (or mock id)
     - Create GitHub gist and Google Drive file (or mocks)

3) **Use KB-Recipe Scout**:
   - Enter seed query + allow-list
   - Preview synthesized KB + Recipe
   - Approve → KB saved to SNOW, Recipe saved locally, Slack notified

4) **Value Realized**:
   - Demo data renders report; print to PDF works

5) **ZIP Artifact**:
   - Base64 chunks restored by `scripts/win/restore_zip.ps1`
   - SHA-256 checksum matches

----------------------------------------------------------------
## Output Instructions (FINAL)

- **Print the complete repository** with every file’s content in code fences (no omissions).

- **Also provide a downloadable ZIP** of the full repository named **`av-ai-ops_repo.zip`**:
  - If the chat platform supports file attachments, attach the ZIP directly.
  - Otherwise, emit **Base64-encoded ZIP chunks** (5–20 MB each), plus:
    - A **SHA-256 checksum** for the assembled ZIP
    - A **PowerShell restore script** at `scripts/win/restore_zip.ps1` that reassembles chunks and verifies the checksum
    - A **.bat helper** at `scripts/win/restore_zip.bat` that calls the PowerShell script
    - `docs/GET_ZIP.md` with step-by-step instructions to rebuild the ZIP locally

- Ensure the ZIP **extracts to a single top-level folder** (e.g., `av-ai-ops/`) matching the printed repo tree.

- The ZIP **must include** a Windows launcher at **`scripts/win/serve_localhost.bat`** that:
  1) **Finds Python** automatically  
     - Prefers `py.exe` (uses `py -0p` to list 3.x installs; selects latest 3.x)  
     - Falls back to `python.exe` on PATH  
     - Searches common locations (e.g., `%LocalAppData%\Programs\Python\Python3*`, `C:\Python3*`)  
     - If Python isn’t found, prints a friendly message with a download hint and exits  
  2) **Sets PATH** for the found Python so the session can run `python -m http.server`  
  3) **Creates a run directory** (idempotent) at `%USERPROFILE%\av-ai-ops-run\`  
  4) **Chooses an available port** by scanning `8080..8099`  
  5) **Starts a local HTTP server** from the repo root using `python -m http.server %PORT% --bind 127.0.0.1 -d "<repo-root>"` in a **new console window**  
  6) **Opens the default browser** to `http://localhost:%PORT%/apps/av-wizard/index.html`  
  7) **Handles errors & port conflicts** gracefully (retry next port, clear messages)

- **Include the exact file** `scripts/win/serve_localhost.bat` **with the following content** (the generator must place this file in the repository):

--- scripts/win/serve_localhost.bat
@echo off
setlocal enabledelayedexpansion
title AV AI OPS — Localhost Server

REM --- Locate Python (prefer py.exe, then python.exe, then common paths) ---
set "PY_CMD="
for /f "tokens=*" %%P in ('where py 2^>NUL') do set "PY_CMD=py"
if not defined PY_CMD (
  for /f "tokens=*" %%P in ('where python 2^>NUL') do set "PY_CMD=python"
)

if not defined PY_CMD (
  for /f "delims=" %%D in ('dir /b /ad "%LocalAppData%\Programs\Python\Python3*" 2^>NUL') do (
    if exist "%LocalAppData%\Programs\Python\%%D\python.exe" (
      set "PY_EXE=%LocalAppData%\Programs\Python\%%D\python.exe"
    )
  )
  if defined PY_EXE (
    set "PY_CMD=%PY_EXE%"
    set "PATH=%LocalAppData%\Programs\Python;%PATH%"
  )
)

if not defined PY_CMD (
  for /f "delims=" %%D in ('dir /b /ad "C:\Python3*" 2^>NUL') do (
    if exist "C:\%%D\python.exe" (
      set "PY_EXE=C:\%%D\python.exe"
    )
  )
  if defined PY_EXE (
    set "PY_CMD=%PY_EXE%"
    set "PATH=C:\Python3;%PATH%"
  )
)

if not defined PY_CMD (
  echo [ERROR] Python 3 not found. Please install Python 3.x from https://www.python.org/downloads/windows/
  pause
  exit /b 1
)

REM --- If py.exe is available, pick latest 3.x interpreter path ---
if /I "%PY_CMD%"=="py" (
  for /f "tokens=*" %%p in ('py -0p 2^>NUL ^| findstr /R "\<3\.[0-9][0-9]*"') do set "PY_EXE=%%p"
  if defined PY_EXE (
    set "PY_CMD=%PY_EXE%"
  )
)

REM --- Establish repo root (this script resides in scripts\win) ---
pushd "%~dp0..\.."
set "REPO_ROOT=%CD%"
popd

REM --- Create run directory (idempotent) ---
set "RUN_DIR=%USERPROFILE%\av-ai-ops-run"
if not exist "%RUN_DIR%" mkdir "%RUN_DIR%"

REM --- Choose an open port between 8080-8099 ---
set "PORT="
for /L %%P in (8080,1,8099) do (
  powershell -Command "(New-Object Net.Sockets.TcpClient).Connect('localhost',%%P)" 2>NUL 1>NUL
  if errorlevel 1 (
    set "PORT=%%P"
    goto :port_found
  )
)
:port_found
if not defined PORT (
  echo [ERROR] No free port found in range 8080..8099.
  pause
  exit /b 1
)

REM --- Start Python HTTP server from repo root in new window ---
set "URL=http://localhost:%PORT%/apps/av-wizard/index.html"
echo [INFO] Serving %REPO_ROOT% at %URL%
start "AV AI OPS Local Server" cmd /c ""%PY_CMD%" -m http.server %PORT% --bind 127.0.0.1 -d "%REPO_ROOT%""
REM --- Give server a moment to start ---
timeout /t 2 >NUL

REM --- Open default browser ---
start "" "%URL%"

echo.
echo [OK] Server started. If the browser didn't open, navigate to:
echo      %URL%
echo Press any key to close this window...
pause >NUL
exit /b 0
---

- Continue to **avoid external CDNs** (bundle any small libs locally).
- Keep MCP server dependencies modest and pinned; include `package-lock.json`.
- Include `LICENSE` (MIT or Apache-2.0), `SECURITY.md`, and `CONTRIBUTING.md`.

- Final user instruction (must be printed at the end of the repository’s `README.md` and `docs/GET_STARTED.md`):
  - **Option A:** Download and extract `av-ai-ops_repo.zip`, then run `scripts\win\serve_localhost.bat`.  
  - **Option B:** Reassemble the Base64 ZIP chunks with `scripts\win\restore_zip.bat` (which calls `scripts\win\restore_zip.ps1`), then run `scripts\win\serve_localhost.bat`.

